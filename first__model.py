# -*- coding: utf-8 -*-
"""First _Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jVGtq8aBXMUTsmJ8A9JD3sNyUFJCn0t_

# **My First ML Project**

# **Load data**
"""

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/master/delaney_solubility_with_descriptors.csv')
df

"""# **Data preparation**

## Data separation as X and y
"""

y = df['logS']
y

X = df.drop('logS', axis=1)
X

"""## Data Splitting"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)

X_train

X_test

"""# **Model Building**

## Linear Regression

### Training the model
"""

from sklearn.linear_model import LinearRegression

ir = LinearRegression()
ir.fit(X_train, y_train)

"""### Apply the model to prediction"""

y_ir_train_pred = ir.predict(X_train)
y_ir_test_pred = ir.predict(X_test)

y_ir_train_pred

y_ir_test_pred

"""### Evaluate model performance"""

from sklearn.metrics import mean_squared_error, r2_score

ir_train_mean = mean_squared_error(y_train, y_ir_train_pred)
ir_train_r2 = r2_score(y_train, y_ir_train_pred)

ir_test_mean = mean_squared_error(y_test, y_ir_test_pred)
ir_test_r2 = r2_score(y_test, y_ir_test_pred)

print(ir_train_mean)
print(ir_train_r2)
print(ir_test_mean)
print(ir_test_r2)

ir_results = pd.DataFrame(['Linear Regression', ir_train_mean, ir_train_r2, ir_test_mean, ir_test_r2]).transpose()
ir_results.columns = ['Method', 'Training Mean', 'Training r2', 'Testing Mean', 'Testing r2']
ir_results

"""# Random Forest

### Training Model
"""

from sklearn.ensemble import RandomForestRegressor

rf = RandomForestRegressor(max_depth=2, random_state=100)
rf.fit(X_train, y_train)

"""### Applying the model to make a prediction"""

y_rf_train_pred = rf.predict(X_train)
y_rf_test_pred = rf.predict(X_test)

"""### Evaluate model performance"""

from sklearn.metrics import mean_squared_error, r2_score

rf_train_mean = mean_squared_error(y_train, y_rf_train_pred)
rf_train_r2 = r2_score(y_train, y_rf_train_pred)

rf_test_mean = mean_squared_error(y_test, y_rf_test_pred)
rf_test_r2 = r2_score(y_test, y_rf_test_pred)

rf_results = pd.DataFrame(['Random Forest', rf_train_mean, rf_train_r2, rf_test_mean, rf_test_r2]).transpose()
rf_results.columns = ['Method', 'Training Mean', 'Training r2', 'Testing Mean', 'Testing r2']
rf_results

"""# **Model Comparison**"""

import pandas as pd

df_models = pd.concat([ir_results, rf_results], axis=0)
df_models

df_models.reset_index(drop=True)

"""# Data Visualization of prediction results"""

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(5, 5))
plt.scatter(x=y_train, y=y_ir_train_pred, c="#09e81c", alpha=0.3)

t = np.polyfit(y_train, y_ir_train_pred, 1)  # Get the coefficients for a first-degree polynomial (linear)
p = np.poly1d(t)  # Create a polynomial function based on the coefficients

plt.plot(y_train, p(y_train), color="#e80c0c")

plt.ylabel('Predict LogS')
plt.xlabel('Experimental LogS')
plt.show()